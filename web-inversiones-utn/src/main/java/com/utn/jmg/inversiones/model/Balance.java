package com.utn.jmg.inversiones.model;
// Generated 21-ago-2017 11:21:49 by Hibernate Tools 4.3.1

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Balance generated by hbm2java
 */
public class Balance implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private Long id;
	private Empresa empresa;

	private Date fechaComienzoPeriodo;
	private Date fechaFinPeriodo;
	private List<Cuenta> cuentas;

	public Balance(Date fechaComienzoPeriodo, Date fechaFinPeriodo) {
		super();
		cuentas = new ArrayList<Cuenta>();
		this.fechaComienzoPeriodo = fechaComienzoPeriodo;
		this.fechaFinPeriodo = fechaFinPeriodo;
	}

	public Empresa getEmpresa() {
		return empresa;
	}

	public void setEmpresa(Empresa empresa) {
		this.empresa = empresa;
	}

	public Date getFechaComienzoPeriodo() {
		return fechaComienzoPeriodo;
	}

	public void setFechaComienzoPeriodo(Date fechaComienzoPeriodo) {
		this.fechaComienzoPeriodo = fechaComienzoPeriodo;
	}

	public Date getFechaFinPeriodo() {
		return fechaFinPeriodo;
	}

	public void setFechaFinPeriodo(Date fechaFinPeriodo) {
		this.fechaFinPeriodo = fechaFinPeriodo;
	}

	public List<Cuenta> getCuentas() {
		return cuentas;
	}

	public void setCuentas(List<Cuenta> cuentas) {
		this.cuentas = cuentas;
	}

	public void agregarCuenta(Cuenta cuenta) {
		cuentas.add(cuenta);
	}

	public Cuenta buscarCuentaBalance(String nombre) {
		try {
			return this.cuentas.stream().filter(cuent -> cuent.getNombreCuenta().equals(nombre)).findFirst().get();
		} catch (Exception e) {
			return null;
		}
	}

	public Cuenta buscarCuentaBalanceSinEspacio(String nombre) {
		try {
			return this.cuentas.stream().filter(cuenta -> cuenta.getNombreCuenta().equalsIgnoreCase(nombre)).findFirst().get();
		} catch (Exception e) {
			return null;
		}
	}

	public String periodo() {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		return sdf.format(fechaComienzoPeriodo) + " - " + sdf.format(fechaFinPeriodo);
	}

	public void modificarCuenta(Cuenta cuentaBalance) {
		this.cuentas.remove(buscarCuentaBalance(cuentaBalance.getNombreCuenta()));
		this.cuentas.add(cuentaBalance);
	}

	public boolean compareTo(Balance balance) {
		return balance.getEmpresa().getCuit().equals(this.getEmpresa().getCuit()) && balance.getFechaComienzoPeriodo().equals(this.getFechaComienzoPeriodo()) && balance.getFechaFinPeriodo().equals(this.getFechaFinPeriodo());
	}

	public static Date getFechaComienzo(String periodoSeleccionado) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		return sdf.parse(periodoSeleccionado.substring(0, 10));
	}

	public static Date getFechaFin(String periodoSeleccionado) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		return sdf.parse(periodoSeleccionado.substring(13, 23));
	}

	public void eliminarCuenta(Cuenta cuentaBalance) {
		cuentas.remove(cuentaBalance);
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

}
